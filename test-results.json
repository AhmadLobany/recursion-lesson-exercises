{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":0,"numPassedTests":0,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":1,"numTotalTests":1,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1568101427034,"success":false,"testResults":[{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mExercise 1 › The function should return the factorial of the argument that has been passed to it\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).toHaveBeenCalledTimes(\u001b[22m\u001b[32m9\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected mock function to have been called \u001b[32mnine times\u001b[39m, but it was called \u001b[31mone time\u001b[39m.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 | \u001b[39m        expect(result\u001b[33m,\u001b[39m \u001b[32m`the function did not return the correct value, when passing ${param} to the function expected ${expectedResult} got  ${result}`\u001b[39m)\u001b[33m.\u001b[39mtoBe(expectedResult)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 13 | \u001b[39m        expect(factorial)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes( param \u001b[33m-\u001b[39m \u001b[35m1\u001b[39m )\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                          \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 14 | \u001b[39m    })\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 | \u001b[39m} )\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledTimes (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:13:27)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1568101427867,"start":1568101427468},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/tests/exercises/ex-1.test.js","testResults":[{"ancestorTitles":["Exercise 1"],"duration":14,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).toHaveBeenCalledTimes(\u001b[22m\u001b[32m9\u001b[39m\u001b[2m)\u001b[22m\n\nExpected mock function to have been called \u001b[32mnine times\u001b[39m, but it was called \u001b[31mone time\u001b[39m.\n    at Object.toHaveBeenCalledTimes (/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/tests/exercises/ex-1.test.js:13:27)\n    at Object.asyncJestTest (/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/Users/danny/code/elevation/tests/recursion-lesson-exercises-solutions/node_modules/jest-jasmine2/build/queue_runner.js:87:41)"],"fullName":"Exercise 1 The function should return the factorial of the argument that has been passed to it","location":null,"numPassingAsserts":0,"status":"failed","title":"The function should return the factorial of the argument that has been passed to it"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}